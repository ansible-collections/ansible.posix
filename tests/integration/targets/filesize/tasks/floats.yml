---
# Test module with floating point numbers (ensure they're not rounded too
# wrongly), since in python floats are tricky:
# 256.256 * 1000 == 256255.9999999997
# 512.512 * 1000 == 512511.9999999994
# 512.513 * 1000 == 512513.0000000006 != .512513 * 1000000

- name: Create a file with a size of 512.512kB (check mode)
  filesize:
    path: "{{ filesize_testfile }}"
    size: 512.512kB
  register: filesize_test_float_01
  check_mode: yes

- name: Create a file with a size of 512.512kB
  filesize:
    path: "{{ filesize_testfile }}"
    size: 512.512kB
  register: filesize_test_float_02

- name: Create a file with a size of 0.512512MB (check mode, idempotency)
  filesize:
    path: "{{ filesize_testfile }}"
    size: 0.512512MB
  register: filesize_test_float_03
  check_mode: yes

- name: Create a file with a size of 0.512512MB (idempotency)
  filesize:
    path: "{{ filesize_testfile }}"
    size: 0.512512MB
  register: filesize_test_float_04

- name: Assert that results are as expected
  assert:
    that:
      - filesize_test_float_01 is changed
      - filesize_test_float_02 is changed
      - filesize_test_float_03 is not changed
      - filesize_test_float_04 is not changed

      - filesize_test_float_01.state is undefined
      - filesize_test_float_02.state in ["file"]
      - filesize_test_float_01.size is undefined
      - filesize_test_float_02.size == 512512
      - filesize_test_float_03.size == 512512
      - filesize_test_float_04.size == 512512



- name: Create a file with a size of 512.513kB (check mode)
  filesize:
    path: "{{ filesize_testfile }}"
    size: 512.513kB
  register: filesize_test_float_11
  check_mode: yes

- name: Create a file with a size of 512.513kB
  filesize:
    path: "{{ filesize_testfile }}"
    size: 512.513kB
  register: filesize_test_float_12

- name: Create a file with a size of 0.512513MB (check mode, idempotency)
  filesize:
    path: "{{ filesize_testfile }}"
    size: 0.512513MB
  register: filesize_test_float_13
  check_mode: yes

- name: Create a file with a size of 0.512513MB (idempotency)
  filesize:
    path: "{{ filesize_testfile }}"
    size: 0.512513MB
  register: filesize_test_float_14

- name: Assert that results are as expected
  assert:
    that:
      - filesize_test_float_11 is changed
      - filesize_test_float_12 is changed
      - filesize_test_float_13 is not changed
      - filesize_test_float_14 is not changed

      - filesize_test_float_11.size == 512512
      - filesize_test_float_11.size_diff == 1
      - filesize_test_float_12.size_diff == 1
      - filesize_test_float_12.size == 512513
      - filesize_test_float_13.size == 512513
      - filesize_test_float_14.size == 512513



- name: Create a file with a size of 4.004MB (check mode)
  filesize:
    path: "{{ filesize_testfile }}"
    size: 4.004MB
  register: filesize_test_float_21
  check_mode: yes

- name: Create a file with a size of 4.004MB
  filesize:
    path: "{{ filesize_testfile }}"
    size: 4.004MB
  register: filesize_test_float_22

- name: Create a file with a size of 4.004MB (check mode, idempotency)
  filesize:
    path: "{{ filesize_testfile }}"
    size: 4.004MB
  register: filesize_test_float_23
  check_mode: yes

- name: Create a file with a size of 4.004MB (idempotency)
  filesize:
    path: "{{ filesize_testfile }}"
    size: 4.004MB
  register: filesize_test_float_24

- name: Assert that results are as expected
  assert:
    that:
      - filesize_test_float_21 is changed
      - filesize_test_float_22 is changed
      - filesize_test_float_23 is not changed
      - filesize_test_float_24 is not changed

      - filesize_test_float_21.size == 512513
      - filesize_test_float_22.size == 4004000
      - filesize_test_float_23.size == 4004000
      - filesize_test_float_24.size == 4004000



- name: Remove test file
  file:
    path: "{{ filesize_testfile }}"
    state: absent
